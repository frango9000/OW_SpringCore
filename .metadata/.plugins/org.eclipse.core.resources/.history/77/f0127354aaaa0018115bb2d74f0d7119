package com.openwebinars.movieadvisor.service;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.openwebinars.movieadvisor.dao.FilmDao;
import com.openwebinars.movieadvisor.model.Film;
import com.openwebinars.movieadvisor.service.FilmService.QueryBuilder;

@Service
public class FilmQueryService {
	
	@Autowired
	FilmDao dao;

	private Stream<Film> stream;

	
	@PostConstruct
	public FilmQueryService initQueryBuilder() {
		stream = dao.findAll().stream();
		return this;
	}

	public Collection<Film> exec() {
		return stream.collect(Collectors.toList());
	}

	public QueryBuilder anyGenre(String... genres) {
		stream.filter(film -> Arrays.stream(genres).anyMatch(film.getGenres()::contains));
		return this;
	}

	public QueryBuilder allGenres(String... genres) {
		stream.filter(film -> Arrays.stream(genres).allMatch(film.getGenres()::contains));
		return this;
	}

	public QueryBuilder year(String year) {
		stream.filter(film -> film.getYear().equalsIgnoreCase(year));
		return this;
	}

	public QueryBuilder betweenYears(String from, String to) {
		stream.filter(film -> {
			LocalDate fromYear = LocalDate.of(Integer.parseInt(from), 1, 1);
			LocalDate toYear = LocalDate.of(Integer.parseInt(to), 1, 3);
			LocalDate filmYear = LocalDate.of(Integer.parseInt(film.getYear()), 1, 2);

			return filmYear.isAfter(fromYear) && filmYear.isBefore(toYear);
		});
		return this;
	}

	public QueryBuilder titleContains(String title) {
		stream.filter(film -> film.getTitle().toLowerCase().contains(title.toLowerCase()));
		return this;
	}

}
