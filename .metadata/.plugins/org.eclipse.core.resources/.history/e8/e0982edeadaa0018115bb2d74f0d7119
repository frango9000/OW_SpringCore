package com.openwebinars.movieadvisor.service;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.openwebinars.movieadvisor.dao.FilmDao;
import com.openwebinars.movieadvisor.model.Film;

@Service
public class FilmQueryService {
	
	@Autowired
	FilmDao dao;

	private Predicate<Film> predicate;
	
	@PostConstruct
	public void init() {
		predicate = (f) -> true;
	}

	public Collection<Film> exec() {
		
		// @formatter:off
		return dao.findAll()
				.stream()
				.filter(predicate)
				.collect(Collectors.toList()); 
		// @formatter:on

	}

	public FilmQueryService anyGenre(String... genres) {
		predicate.and(film -> Arrays.stream(genres).anyMatch(film.getGenres()::contains));
		return this;
	}

	public FilmQueryService allGenres(String... genres) {
		predicate.and(film -> Arrays.stream(genres).allMatch(film.getGenres()::contains));
		return this;
	}

	public FilmQueryService year(String year) {
		predicate.and(film -> film.getYear().equalsIgnoreCase(year));
		return this;
	}

	public FilmQueryService betweenYears(String from, String to) {
		predicate.and(film -> {
			LocalDate fromYear = LocalDate.of(Integer.parseInt(from), 1, 1);
			LocalDate toYear = LocalDate.of(Integer.parseInt(to), 1, 3);
			LocalDate filmYear = LocalDate.of(Integer.parseInt(film.getYear()), 1, 2);

			return filmYear.isAfter(fromYear) && filmYear.isBefore(toYear);
		});

		return this;
	}

	public FilmQueryService titleContains(String title) {
		predicate.and(film -> film.getTitle().toLowerCase().contains(title.toLowerCase()));
		return this;
	}

}
